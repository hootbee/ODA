spring.application.name=oda

# Gemini API Key (백엔드에서 직접 사용하지 않는다면 제거해도 됨)
gemini.api-key=

# ===================================================================
# Database Configuration (PostgreSQL on Supabase)
# ===================================================================
spring.datasource.url=${SPRING_DATASOURCE_URL} # 변경
spring.datasource.username=${SPRING_DATASOURCE_USERNAME} # 변경
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD} # 변경
spring.datasource.driver-class-name=org.postgresql.Driver

# ===================================================================
# JPA & Hibernate Configuration
# ===================================================================
# 데이터베이스 스키마 자동 생성 및 관리 설정
# 'update': 기존 스키마를 유지하면서 새로운 변경사항만 반영
# 운영 환경에서는 'validate' 또는 'none'을 사용하는 것이 안전함
spring.jpa.hibernate.ddl-auto=update

# Hibernate 방언 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# 실행되는 SQL을 콘솔에 출력
spring.jpa.show-sql=true

# SQL을 보기 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

# ===================================================================
# Spring Security & OAuth2 (Google) Configuration
# ===================================================================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH_REDIRECT_URI}

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# ===================================================================
# JWT Configuration
# ===================================================================
# JWT 서명에 사용할 비밀 키
# 실제 운영 환경에서는 더 안전한 키를 사용해야 함
jwt.secret=${JWT_SECRET:your-super-secret-jwt-key-here-make-it-long-and-secure}

# JWT 토큰 만료 시간 (밀리초 단위, 86400000ms = 24시간)
jwt.expiration=86400000

# ===================================================================
# Agent Server Configuration
# ===================================================================
# Agent 서버 URL - 컨테이너 이름으로 통신
# 확실한 해결책
agent.server.url=http://agent:3001

# ===================================================================
# HikariCP Connection Pool Configuration (for Supabase/PgBouncer)
# ===================================================================
# Supabase 사용 시 연결 풀 크기를 작게 설정 (권장: 2-5)
spring.datasource.hikari.maximum-pool-size=5

# ===================================================================
# MVC Configuration
# ===================================================================
# 비동기 요청 타임아웃 시간 설정 (밀리초 단위, 60000ms = 60초)
# 기본값은 30초이며, 30초 이상 걸리는 작업이 있을 경우 늘려줍니다.
spring.mvc.async.request-timeout=120000